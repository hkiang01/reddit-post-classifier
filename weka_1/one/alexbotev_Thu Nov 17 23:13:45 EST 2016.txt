TLDR : Discussion do we need something like LLVM-IR in Machine learning. 

I personally think that we do, and the main reason is that all of the frameworks are doing more or less the same optimizations, which 95% does not depend on the hardware and can be done on the abstract graph (e.g. you can't for instance decide whether you use cuDNN or not without knowing the hardware). Rather than all of the doing their own, literally all users can benefit if this is a unified representation, and people optimizing it contribute together to the same project. For instance Theano's great, eve huge, collections for RNNs would directly help everyone else. MXNet static memory allocation is another example of something that any frontend/framework would benefit from. 

Choice of language - I think for such, similar to Tf should be C++/C. Why? This optimizations are more or less equivalent to a full blown compiler (sometimes maybe even harder). Traversing numerous times large graph - you care about speed. Also C++/C can have external APIs to any other language, so it is easily portable. 

So, I've started something like this here: https://github.com/Metadiff/graph-ir. It is fairly work in progress, however I hope that anyone who wishes to write their own framework with a backend can easily reuse it, especially cause it will give you autodiff for free. A few nice features, which I like, are automatic "dynamic" shape inference - e.g. even if you don't know a certain shape size, you can still reason if a == b. Also, I intend to add more meta data automatic propagation. One of the main reasons for this is to give you "compile" time guarantee that the graph is correct. This means no more cryptic messages from Theano and Tf because you did not provide something correctly, you get them exactly where you make them in the source code. Essentially guaranteeing no run-time errors except if you get overflow/underflows (nans/infs). Also, all frameworks have run time checks before each OP that inputs are correct. With this you ONLY need to check that the inputs satisfy their constraints and you are guaranteed that the whole function will execute correctly start to end. 

There are however, some design aspects, which more or less I'm not sure what is a good choice. I was hoping if there are people interested in discussing design choices for this as any advice or suggestion might be very helpful. I hoped that I would have this working earlier, but in fact for a good design it takes me a lot more time to write it up. I also know now with so many frameworks, and given that I'm not backed by any company, if the community does not like this idea, it is doomed to fail. If that is the case than maybe the project will help enthusiasts interested in the inner workings of these frameworks to learn about these things. 