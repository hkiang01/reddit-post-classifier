This directory contains CMake files for building TensorFlow on Microsoft Windows. CMake is a cross-platform tool that can generate build scripts for multiple build systems, including Microsoft Visual Studio. N.B. We provide Linux build instructions primarily for the purpose of testing the build. We recommend using the standard Bazel-based build on Linux. The CMake files in this directory can build the core TensorFlow runtime, an example C++ binary, and a PIP package containing the runtime and Python bindings. Note: Windows support is in an alpha state, and we welcome your feedback. The Python package supports Python 3.5 only, because that is the only version for which standard Python binaries exist and those binaries are compatible with the TensorFlow runtime. (On Windows, the standard Python binaries for versions earlier than 3.5 were compiled with older compilers that do not have all of the features (e.g. C++11 support) needed to compile TensorFlow. We welcome patches for making TensorFlow work with Python 2.7 on Windows, but have not yet committed to supporting that configuration.) The following Python APIs are not currently implemented: Loading custom op libraries via . In order to use your custom op, please put the source code under the tensorflow/core/user_ops directory, and a shape function is required (not optional) for each op. Path manipulation functions (such as ) are not functional. The libraries are not currently included in the PIP package. The following operations are not currently implemented: Google Cloud Storage support is not currently implemented. The GCS library currently depends on and , and the Windows version could use standard Windows APIs for making HTTP requests and cryptography (for OAuth). Contributions are welcome for this feature. We are actively working on improving CMake and Windows support, and addressing these limitations. We would appreciate pull requests that implement missing ops or APIs. Install the pre-requisites detailed above, and set up your environment. The following commands assume that you are using the Windows Command Prompt (). You will need to set up your environment to use the appropriate toolchain, i.e. the 64-bit tools. (Some of the binary targets we will build are too large for the 32-bit tools, and they will fail with out-of-memory errors.) The typical command to do set up your environment is: When building with GPU support after installing the CUDNN zip file from NVidia, append its bin directory to your PATH environment variable. In case TensorFlow fails to find the CUDA dll's during initialization, check your PATH environment variable. It should contain the directory of the CUDA dlls and the directory of the CUDNN dll. For example: We assume that and are installed and in your . If for example is not in your path and it is installed in , you can add this directory to your as follows: Clone the TensorFlow repository and create a working directory for your build: N.B. This assumes that is in your environment variable. The other paths are for illustrative purposes only, and may be different on your platform. The character is a line continuation and must be the last character on each line. To build with GPU support add "^" at the end of the last line above following with: Note that the flag must match the build configuration that you choose when invoking . The known-good values are and . The build type is not currently supported, because it relies on a library for Python () that is not distributed by default. There are various options that can be specified when generating the solution and project files: : Note that the option must match the build configuration that you choose when invoking MSBuild in step 4. The known-good values are and . The build type is not currently supported, because it relies on a library for Python () that is not distributed by default. . Defaults to . You can build a small subset of the kernels for a faster build by setting this option to . . Defaults to . Generate project files for a simple C++ example training program. . Defaults to . Generate project files for building a PIP package containing the TensorFlow runtime and its Python bindings. . Defaults to . Include gRPC support and the distributed client and server code in the TensorFlow runtime. . Defaults to . Include SSL support (for making secure HTTP requests) in the TensorFlow runtime. This support is incomplete, and will be used for Google Cloud Storage support. . Defaults to . Include GPU support. If GPU is enabled you need to install the CUDA 8.0 Toolkit and CUDNN 5.1. CMake will expect the location of CUDNN in -DCUDNN_HOME=path_you_unziped_cudnn. . Defaults to . This builds cc unit tests. There are many of them and building will take a few hours. After cmake, build and execute the tests with . Defaults to . This enables python kernel tests. After building the python wheel, you need to install the new wheel before running the tests. To execute the tests, use This build requires Docker to be installed on the local machine.