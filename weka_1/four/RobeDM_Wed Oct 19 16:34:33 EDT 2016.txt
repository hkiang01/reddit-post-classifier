LIBIRWLS is an integrated library that makes use of a parallel implementation of the Iterative Re-Weighted Least Squares (IRWLS) procedure for solving the quadratic programmig (QP) problem that arises during the training of Support Vector Machines (SVMs). It implements the functions to run two different algorithms: Parallel Iterative Re-Weighted Least Squares: A Parallel SVM solver based on the IRWLS algorithm. Parallel Semi-parametric Iterative Re-Weighted Least Squares: A Parallel Semiparametric SVMs solver based on the IRWLS algorithm. For a detailed explanation of the algorithms take a look at the web page SVMs are a very popular machine learning technique because they can easily create non-linear solutions by transforming the input space onto a high dimensional one where a kernel function can compute the inner product of a pair vectors. Thanks to this ability, they offer a good compromise between complexity and performance in many applications. SVMs have two main limitations. The first problem is related to their non-parametric nature. The complexity of the classifier is not limited and depends on the number of Support Vectors (SVs) after training. If the number of SVs is very large we may obtain a very slow classifier when processing new samples. The second problem is the run time associated to the training procedure that may be excessive for large datasets. To face these problems, we can make use of parallel computing, thus reducing the run time of the training procedure or we can use semi-parametric approximations than can limit the complexity of the model in advance, which directly implies a faster classifier. The above situation motivated us to develop "LIBIRWLS", an integrated library based on a parallel implementation of the IRWLS procedure to solve non-linear SVMs and semi-parametric SVMs. This library is implemented in C, supports a wide range of platforms and also provides detailed information about its programming interface and dependencies. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. The structure of this library is as follows: You can find detailed information about the software and algorithms in its respective webpage: A documentation of the application programming interface (API) has been created in html format and it can be found in the folder docs/html. This documentation is also available online: If you have any installation problem you can se an example of a correct installation step by step and a demonstration of running the algorithms using the command line interface for Linux and OSX here. If that doesn't solve you problem, please, report the issue here. This software is implemented in C and requires the following libraries: You need to run make in the library folder to build LIBIRWLS. If you have installed atlas using apt-get: If you have manually installed ATLAS, you must tell the installation directory. The default compiler in OS X is clang. It currently doesn't works with openmp. You can install gcc using Homebrew or Macports: OS X has its own accelerated algebra standard routines. The name of this library is veclib and it is composed by two files: These files are in the directory: This library will look for the library in that directory. Check that both files are there. If they are in a diferent path, look for them using the command "find" and note the folder for the next step: You must use the make command using the following parameters: LIBIRWLS contains windows executable files that were precompiled for 32 and 64 bits instancies. These executables are static so no extra packages are needed. If you want to obtain an optimized performance the software must be compiled and built in your system using tools like cygwin. This is because ATLAS fixes some parameters to optimize the run time attending to the microprocessor in the computer that builds it. For testing purposes, the folder demo contains a .bat windows demo script and a Unix .sh demo script that download a sample dataset from the libsvm repository and runs the executable files. The algorithm is described in this paper: To train the algorithm and create the model: training_set_file: Training set in LibSVM format model_file: File where the classifier will be stored The algorithm is described in this paper: Morales, R. D., & Vázquez, Á. N. (2016). Improving the efficiency of IRWLS SVMs using Parallel Cholesky Factorization. Pattern Recognition Letters. To train the algorithm and create the model: training_set_file: Training set in LibSVM format model_file: File where the classifier will be stored To make predictions with the model in a different dataset: The dataset must be provided in LibSVM format, labeled to train the model and labeled or unlabeled for predictions (using the -l option in the PIRWLS-predict command to tell if the file is labeled or unlabeled): Installation and running instructions are detailed in the README.md file of the folder python-module