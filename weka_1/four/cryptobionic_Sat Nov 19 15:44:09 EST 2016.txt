[The repo](https://github.com/cameronfabbri/tensorflow_ops) and the
[direct source code](https://github.com/cameronfabbri/tensorflow_ops/blob/master/tensorflow_ops/__init__.py)

I noticed throughout many of my projects I was just copying and pasting a lot of code (mainly functions for convolutions and fully connected layers), so I grouped them in a simple package that can be easily imported and used. For example, the function below for computing a convolution was being used in every project, and therefore was  rewritten in every project. 

    def _conv_layer(inputs, kernel_size, stride, num_channels, name):
        with tf.variable_scope(name) as scope:
            input_channels = inputs.get_shape()[3]
            weights = _variable_with_weight_decay('weights', shape=[kernel_size, kernel_size, input_channels, num_channels], stddev=0.1, wd=0.0005)
            biases = _variable_on_cpu('biases', [num_channels], tf.constant_initializer(0.1))
            conv = tf.nn.conv2d(inputs, weights, strides=[1, stride, stride, 1], padding='SAME')
            conv_biased = tf.nn.bias_add(conv, biases)
            return conv_biased

Now all that needs to be done is:
    from tensorflow_ops import _conv_layer

Feedback and additions are welcome, an example is provided in the repository.