The core of this framework is the use of the Binarized Neural Network (BNN) described in Binarized Neural Networks: Training Deep Neural Networks with Weights and Activations Constrained to +1 or -1. This framework seemed ideal for use with embedded systems such as an Arduino (or Raspberry Pi), but to my knowledge this wasn't already available. The system consists of two parts: The two sample scripts, and demonstrate how to train a model to discriminate an XOR function. The model uses a lot more weights than would theoretically be necessary for this task, but together they demonstrate how to adapt the code to other use cases. The outputs show the predictions for an XOR function. This is how the file was generated. Encoding weights / activations with values of -1 and 1 as binary values: . Then matrix multiplication done using the XOR operation. Here's an example: Using binary weights and activations of -1 and 1: Using binary weights and activations of -1 and 1: Because the operations are done this way, I made it so that matrix dimensions must be multiples of the integer sizes. Padding can be used to make data line up correctly (although if someone wants to change this, LMK). This was a project that I worked on for CalHacks 3.0 (although I never submitted it).